

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    public sealed partial class AccountAllocation : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass>
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AccountAllocation()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AccountAllocation(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.AccountAllocation> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.AccountAllocation.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccountAllocation_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccountAllocation_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ID
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ID);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ParentID
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ParentID);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ParentID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ParentID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ParentID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ParentID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string VenueCode
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.VenueCode);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.VenueCode, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VenueCode_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VenueCode_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void VenueCode_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string AccountCode
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.AccountCode);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.AccountCode, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccountCode_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccountCode_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AccountCode_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double Ratio
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Ratio);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Ratio, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ratio_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ratio_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Ratio_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double Amount
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Amount);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Amount, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Amount_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Amount_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Amount_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double TranchSize
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.TranchSize);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.TranchSize, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TranchSize_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TranchSize_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TranchSize_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Enabled
        {
            get
            {
                return global::LightSwitchApplication.AccountAllocation.DetailsClass.GetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Enabled);
            }
            set
            {
                global::LightSwitchApplication.AccountAllocation.DetailsClass.SetValue(this, global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Enabled, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.AccountAllocation,
                global::LightSwitchApplication.AccountAllocation.DetailsClass,
                global::LightSwitchApplication.AccountAllocation.DetailsClass.IImplementation,
                global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ID;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass>.Entry
                __AccountAllocationEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass>.Entry(
                    global::LightSwitchApplication.AccountAllocation.DetailsClass.__AccountAllocation_CreateNew,
                    global::LightSwitchApplication.AccountAllocation.DetailsClass.__AccountAllocation_Created,
                    global::LightSwitchApplication.AccountAllocation.DetailsClass.__AccountAllocation_AllowSaveWithErrors);
            private static global::LightSwitchApplication.AccountAllocation __AccountAllocation_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.AccountAllocation> es)
            {
                return new global::LightSwitchApplication.AccountAllocation(es);
            }
            private static void __AccountAllocation_Created(global::LightSwitchApplication.AccountAllocation e)
            {
                e.AccountAllocation_Created();
            }
            private static bool __AccountAllocation_AllowSaveWithErrors(global::LightSwitchApplication.AccountAllocation e)
            {
                bool result = false;
                e.AccountAllocation_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string> ID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string> ParentID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.ParentID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string> VenueCode
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.VenueCode) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string> AccountCode
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.AccountCode) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double> Ratio
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Ratio) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double> Amount
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Amount) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double> TranchSize
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.TranchSize) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, bool> Enabled
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties.Enabled) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, bool>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new string ID { get; set; }
                new string ParentID { get; set; }
                new string VenueCode { get; set; }
                new string AccountCode { get; set; }
                new double Ratio { get; set; }
                new double Amount { get; set; }
                new double TranchSize { get; set; }
                new bool Enabled { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry
                    ID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry(
                        "ID",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ID_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ID_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ID_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ID_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ID_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ID_OnValueChanged);
                private static void _ID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._ID, sf);
                }
                private static bool _ID_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.ID_IsReadOnly(ref result);
                    return result;
                }
                private static void _ID_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ID_Validate(r);
                }
                private static string _ID_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.ID;
                }
                private static void _ID_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ID = v;
                }
                private static void _ID_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.ID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry
                    ParentID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry(
                        "ParentID",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ParentID_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ParentID_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ParentID_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ParentID_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ParentID_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._ParentID_OnValueChanged);
                private static void _ParentID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._ParentID, sf);
                }
                private static bool _ParentID_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.ParentID_IsReadOnly(ref result);
                    return result;
                }
                private static void _ParentID_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ParentID_Validate(r);
                }
                private static string _ParentID_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.ParentID;
                }
                private static void _ParentID_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ParentID = v;
                }
                private static void _ParentID_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.ParentID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry
                    VenueCode = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry(
                        "VenueCode",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._VenueCode_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._VenueCode_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._VenueCode_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._VenueCode_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._VenueCode_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._VenueCode_OnValueChanged);
                private static void _VenueCode_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._VenueCode, sf);
                }
                private static bool _VenueCode_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.VenueCode_IsReadOnly(ref result);
                    return result;
                }
                private static void _VenueCode_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.VenueCode_Validate(r);
                }
                private static string _VenueCode_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.VenueCode;
                }
                private static void _VenueCode_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, string v)
                {
                    d.ImplementationEntity.VenueCode = v;
                }
                private static void _VenueCode_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.VenueCode_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry
                    AccountCode = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Entry(
                        "AccountCode",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._AccountCode_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._AccountCode_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._AccountCode_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._AccountCode_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._AccountCode_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._AccountCode_OnValueChanged);
                private static void _AccountCode_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._AccountCode, sf);
                }
                private static bool _AccountCode_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.AccountCode_IsReadOnly(ref result);
                    return result;
                }
                private static void _AccountCode_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.AccountCode_Validate(r);
                }
                private static string _AccountCode_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.AccountCode;
                }
                private static void _AccountCode_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, string v)
                {
                    d.ImplementationEntity.AccountCode = v;
                }
                private static void _AccountCode_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.AccountCode_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Entry
                    Ratio = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Entry(
                        "Ratio",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Ratio_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Ratio_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Ratio_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Ratio_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Ratio_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Ratio_OnValueChanged);
                private static void _Ratio_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._Ratio, sf);
                }
                private static bool _Ratio_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.Ratio_IsReadOnly(ref result);
                    return result;
                }
                private static void _Ratio_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Ratio_Validate(r);
                }
                private static double _Ratio_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.Ratio;
                }
                private static void _Ratio_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, double v)
                {
                    d.ImplementationEntity.Ratio = v;
                }
                private static void _Ratio_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.Ratio_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Entry
                    Amount = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Entry(
                        "Amount",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Amount_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Amount_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Amount_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Amount_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Amount_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Amount_OnValueChanged);
                private static void _Amount_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._Amount, sf);
                }
                private static bool _Amount_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.Amount_IsReadOnly(ref result);
                    return result;
                }
                private static void _Amount_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Amount_Validate(r);
                }
                private static double _Amount_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.Amount;
                }
                private static void _Amount_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, double v)
                {
                    d.ImplementationEntity.Amount = v;
                }
                private static void _Amount_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.Amount_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Entry
                    TranchSize = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Entry(
                        "TranchSize",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._TranchSize_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._TranchSize_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._TranchSize_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._TranchSize_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._TranchSize_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._TranchSize_OnValueChanged);
                private static void _TranchSize_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._TranchSize, sf);
                }
                private static bool _TranchSize_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.TranchSize_IsReadOnly(ref result);
                    return result;
                }
                private static void _TranchSize_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TranchSize_Validate(r);
                }
                private static double _TranchSize_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.TranchSize;
                }
                private static void _TranchSize_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, double v)
                {
                    d.ImplementationEntity.TranchSize = v;
                }
                private static void _TranchSize_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.TranchSize_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, bool>.Entry
                    Enabled = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, bool>.Entry(
                        "Enabled",
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Enabled_Stub,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Enabled_ComputeIsReadOnly,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Enabled_Validate,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Enabled_GetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Enabled_SetImplementationValue,
                        global::LightSwitchApplication.AccountAllocation.DetailsClass.PropertySetProperties._Enabled_OnValueChanged);
                private static void _Enabled_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AccountAllocation.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, bool>.Data> c, global::LightSwitchApplication.AccountAllocation.DetailsClass d, object sf)
                {
                    c(d, ref d._Enabled, sf);
                }
                private static bool _Enabled_ComputeIsReadOnly(global::LightSwitchApplication.AccountAllocation e)
                {
                    bool result = false;
                    e.Enabled_IsReadOnly(ref result);
                    return result;
                }
                private static void _Enabled_Validate(global::LightSwitchApplication.AccountAllocation e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Enabled_Validate(r);
                }
                private static bool _Enabled_GetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d)
                {
                    return d.ImplementationEntity.Enabled;
                }
                private static void _Enabled_SetImplementationValue(global::LightSwitchApplication.AccountAllocation.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Enabled = v;
                }
                private static void _Enabled_OnValueChanged(global::LightSwitchApplication.AccountAllocation e)
                {
                    e.Enabled_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data _ID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data _ParentID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data _VenueCode;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, string>.Data _AccountCode;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Data _Ratio;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Data _Amount;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, double>.Data _TranchSize;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.AccountAllocation, global::LightSwitchApplication.AccountAllocation.DetailsClass, bool>.Data _Enabled;
            
        }
    
        #endregion
    }
    
    #endregion
}
