

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    public sealed partial class Strategy : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass>
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Strategy()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Strategy(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Strategy> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Strategy.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Strategy_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Strategy_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LastOrdIdentity
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.LastOrdIdentity);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.LastOrdIdentity, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastOrdIdentity_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastOrdIdentity_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastOrdIdentity_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UserID
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UserID);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UserID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Identity
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Identity);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Identity, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Identity_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Identity_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Identity_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ProductID
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ProductID);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ProductID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProductID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Mnemonic
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Mnemonic);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Mnemonic, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Mnemonic_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Mnemonic_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Mnemonic_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DataMnemonic
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.DataMnemonic);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.DataMnemonic, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DataMnemonic_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DataMnemonic_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void DataMnemonic_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Side
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Side);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Side, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Side_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Side_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Side_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ShortSaleLocate
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ShortSaleLocate);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ShortSaleLocate, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ShortSaleLocate_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ShortSaleLocate_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ShortSaleLocate_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string OrdType
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.OrdType);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.OrdType, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrdType_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrdType_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OrdType_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TimeInForce
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TimeInForce);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TimeInForce, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeInForce_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeInForce_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimeInForce_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TIFDateTime
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TIFDateTime);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TIFDateTime, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TIFDateTime_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TIFDateTime_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TIFDateTime_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double QtyLimit
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.QtyLimit);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.QtyLimit, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void QtyLimit_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void QtyLimit_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void QtyLimit_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int MaxIterations
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxIterations);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxIterations, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxIterations_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxIterations_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxIterations_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int MaxEntries
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxEntries);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxEntries, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxEntries_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxEntries_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxEntries_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double MaxPrice
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxPrice);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxPrice, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxPrice_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxPrice_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxPrice_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double MinPrice
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MinPrice);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MinPrice, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MinPrice_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MinPrice_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MinPrice_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double Qty
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Qty);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Qty, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Qty_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Qty_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Qty_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<double> MaxFloor
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxFloor);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxFloor, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxFloor_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxFloor_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MaxFloor_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double Price
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Price);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Price, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Price_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Price_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Price_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool FlattenOnExit
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.FlattenOnExit);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.FlattenOnExit, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FlattenOnExit_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FlattenOnExit_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FlattenOnExit_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool CancelOnExit
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.CancelOnExit);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.CancelOnExit, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CancelOnExit_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CancelOnExit_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CancelOnExit_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool UseStrategyTimes
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UseStrategyTimes);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UseStrategyTimes, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UseStrategyTimes_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UseStrategyTimes_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UseStrategyTimes_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime StartTime
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.StartTime);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.StartTime, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StartTime_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StartTime_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StartTime_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime EndTime
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.EndTime);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.EndTime, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EndTime_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EndTime_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EndTime_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UserName
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UserName);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UserName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public double StopPx
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.StopPx);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.StopPx, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StopPx_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StopPx_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StopPx_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Account
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Account);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Account, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Account_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Account_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Account_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Type
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Type);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Type, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Type_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Type_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Type_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PXAlgorithmName
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.PXAlgorithmName);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.PXAlgorithmName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PXAlgorithmName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PXAlgorithmName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PXAlgorithmName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TriggerName
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TriggerName);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TriggerName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TriggerName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TriggerName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TriggerName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EntryTriggerName
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.EntryTriggerName);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.EntryTriggerName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EntryTriggerName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EntryTriggerName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EntryTriggerName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool AutoConnectTrg
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.AutoConnectTrg);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.AutoConnectTrg, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AutoConnectTrg_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AutoConnectTrg_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AutoConnectTrg_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ConditionInterval
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ConditionInterval);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ConditionInterval, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConditionInterval_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConditionInterval_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ConditionInterval_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Enabled
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Enabled);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Enabled, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Enabled_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ORAlgorithmName
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ORAlgorithmName);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ORAlgorithmName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ORAlgorithmName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ORAlgorithmName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ORAlgorithmName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ParameterBag
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ParameterBag);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ParameterBag, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ParameterBag_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ParameterBag_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ParameterBag_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string RunIdentifier
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.RunIdentifier);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.RunIdentifier, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RunIdentifier_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RunIdentifier_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RunIdentifier_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CorrelationID
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.CorrelationID);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.CorrelationID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CorrelationID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CorrelationID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void CorrelationID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TSQueryGroupPath
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TSQueryGroupPath);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TSQueryGroupPath, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TSQueryGroupPath_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TSQueryGroupPath_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TSQueryGroupPath_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Info
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Info);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Info, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Info_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Info_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Info_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int State
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.State);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.State, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void State_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void State_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void State_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Initialized
        {
            get
            {
                return global::LightSwitchApplication.Strategy.DetailsClass.GetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Initialized);
            }
            set
            {
                global::LightSwitchApplication.Strategy.DetailsClass.SetValue(this, global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Initialized, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Initialized_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Initialized_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Initialized_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Strategy,
                global::LightSwitchApplication.Strategy.DetailsClass,
                global::LightSwitchApplication.Strategy.DetailsClass.IImplementation,
                global::LightSwitchApplication.Strategy.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.LastOrdIdentity;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass>.Entry
                __StrategyEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass>.Entry(
                    global::LightSwitchApplication.Strategy.DetailsClass.__Strategy_CreateNew,
                    global::LightSwitchApplication.Strategy.DetailsClass.__Strategy_Created,
                    global::LightSwitchApplication.Strategy.DetailsClass.__Strategy_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Strategy __Strategy_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Strategy> es)
            {
                return new global::LightSwitchApplication.Strategy(es);
            }
            private static void __Strategy_Created(global::LightSwitchApplication.Strategy e)
            {
                e.Strategy_Created();
            }
            private static bool __Strategy_AllowSaveWithErrors(global::LightSwitchApplication.Strategy e)
            {
                bool result = false;
                e.Strategy_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Strategy.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> LastOrdIdentity
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.LastOrdIdentity) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> UserID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UserID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> Identity
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Identity) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> ProductID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ProductID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> Mnemonic
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Mnemonic) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> DataMnemonic
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.DataMnemonic) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> Side
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Side) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> ShortSaleLocate
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ShortSaleLocate) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> OrdType
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.OrdType) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> TimeInForce
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TimeInForce) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> TIFDateTime
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TIFDateTime) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double> QtyLimit
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.QtyLimit) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int> MaxIterations
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxIterations) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int> MaxEntries
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxEntries) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double> MaxPrice
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxPrice) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double> MinPrice
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MinPrice) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double> Qty
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Qty) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.Nullable<double>> MaxFloor
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.MaxFloor) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.Nullable<double>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double> Price
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Price) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool> FlattenOnExit
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.FlattenOnExit) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool> CancelOnExit
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.CancelOnExit) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool> UseStrategyTimes
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UseStrategyTimes) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime> StartTime
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.StartTime) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime> EndTime
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.EndTime) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> UserName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.UserName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double> StopPx
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.StopPx) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> Account
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Account) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int> Type
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Type) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> PXAlgorithmName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.PXAlgorithmName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> TriggerName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TriggerName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> EntryTriggerName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.EntryTriggerName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool> AutoConnectTrg
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.AutoConnectTrg) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int> ConditionInterval
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ConditionInterval) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool> Enabled
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Enabled) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> ORAlgorithmName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ORAlgorithmName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> ParameterBag
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.ParameterBag) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> RunIdentifier
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.RunIdentifier) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> CorrelationID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.CorrelationID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> TSQueryGroupPath
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.TSQueryGroupPath) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string> Info
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Info) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int> State
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.State) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool> Initialized
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties.Initialized) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new string LastOrdIdentity { get; set; }
                new string UserID { get; set; }
                new string Identity { get; set; }
                new string ProductID { get; set; }
                new string Mnemonic { get; set; }
                new string DataMnemonic { get; set; }
                new string Side { get; set; }
                new string ShortSaleLocate { get; set; }
                new string OrdType { get; set; }
                new string TimeInForce { get; set; }
                new string TIFDateTime { get; set; }
                new double QtyLimit { get; set; }
                new int MaxIterations { get; set; }
                new int MaxEntries { get; set; }
                new double MaxPrice { get; set; }
                new double MinPrice { get; set; }
                new double Qty { get; set; }
                new global::System.Nullable<double> MaxFloor { get; set; }
                new double Price { get; set; }
                new bool FlattenOnExit { get; set; }
                new bool CancelOnExit { get; set; }
                new bool UseStrategyTimes { get; set; }
                new global::System.DateTime StartTime { get; set; }
                new global::System.DateTime EndTime { get; set; }
                new string UserName { get; set; }
                new double StopPx { get; set; }
                new string Account { get; set; }
                new int Type { get; set; }
                new string PXAlgorithmName { get; set; }
                new string TriggerName { get; set; }
                new string EntryTriggerName { get; set; }
                new bool AutoConnectTrg { get; set; }
                new int ConditionInterval { get; set; }
                new bool Enabled { get; set; }
                new string ORAlgorithmName { get; set; }
                new string ParameterBag { get; set; }
                new string RunIdentifier { get; set; }
                new string CorrelationID { get; set; }
                new string TSQueryGroupPath { get; set; }
                new string Info { get; set; }
                new int State { get; set; }
                new bool Initialized { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    LastOrdIdentity = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "LastOrdIdentity",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._LastOrdIdentity_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._LastOrdIdentity_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._LastOrdIdentity_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._LastOrdIdentity_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._LastOrdIdentity_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._LastOrdIdentity_OnValueChanged);
                private static void _LastOrdIdentity_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._LastOrdIdentity, sf);
                }
                private static bool _LastOrdIdentity_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.LastOrdIdentity_IsReadOnly(ref result);
                    return result;
                }
                private static void _LastOrdIdentity_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LastOrdIdentity_Validate(r);
                }
                private static string _LastOrdIdentity_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.LastOrdIdentity;
                }
                private static void _LastOrdIdentity_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.LastOrdIdentity = v;
                }
                private static void _LastOrdIdentity_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.LastOrdIdentity_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    UserID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "UserID",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserID_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserID_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserID_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserID_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserID_OnValueChanged);
                private static void _UserID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._UserID, sf);
                }
                private static bool _UserID_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.UserID_IsReadOnly(ref result);
                    return result;
                }
                private static void _UserID_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UserID_Validate(r);
                }
                private static string _UserID_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.UserID;
                }
                private static void _UserID_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.UserID = v;
                }
                private static void _UserID_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.UserID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    Identity = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "Identity",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Identity_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Identity_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Identity_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Identity_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Identity_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Identity_OnValueChanged);
                private static void _Identity_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Identity, sf);
                }
                private static bool _Identity_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Identity_IsReadOnly(ref result);
                    return result;
                }
                private static void _Identity_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Identity_Validate(r);
                }
                private static string _Identity_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Identity;
                }
                private static void _Identity_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Identity = v;
                }
                private static void _Identity_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Identity_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    ProductID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "ProductID",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ProductID_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ProductID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ProductID_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ProductID_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ProductID_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ProductID_OnValueChanged);
                private static void _ProductID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._ProductID, sf);
                }
                private static bool _ProductID_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.ProductID_IsReadOnly(ref result);
                    return result;
                }
                private static void _ProductID_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ProductID_Validate(r);
                }
                private static string _ProductID_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.ProductID;
                }
                private static void _ProductID_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ProductID = v;
                }
                private static void _ProductID_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.ProductID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    Mnemonic = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "Mnemonic",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Mnemonic_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Mnemonic_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Mnemonic_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Mnemonic_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Mnemonic_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Mnemonic_OnValueChanged);
                private static void _Mnemonic_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Mnemonic, sf);
                }
                private static bool _Mnemonic_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Mnemonic_IsReadOnly(ref result);
                    return result;
                }
                private static void _Mnemonic_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Mnemonic_Validate(r);
                }
                private static string _Mnemonic_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Mnemonic;
                }
                private static void _Mnemonic_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Mnemonic = v;
                }
                private static void _Mnemonic_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Mnemonic_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    DataMnemonic = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "DataMnemonic",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._DataMnemonic_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._DataMnemonic_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._DataMnemonic_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._DataMnemonic_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._DataMnemonic_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._DataMnemonic_OnValueChanged);
                private static void _DataMnemonic_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._DataMnemonic, sf);
                }
                private static bool _DataMnemonic_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.DataMnemonic_IsReadOnly(ref result);
                    return result;
                }
                private static void _DataMnemonic_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.DataMnemonic_Validate(r);
                }
                private static string _DataMnemonic_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.DataMnemonic;
                }
                private static void _DataMnemonic_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.DataMnemonic = v;
                }
                private static void _DataMnemonic_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.DataMnemonic_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    Side = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "Side",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Side_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Side_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Side_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Side_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Side_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Side_OnValueChanged);
                private static void _Side_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Side, sf);
                }
                private static bool _Side_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Side_IsReadOnly(ref result);
                    return result;
                }
                private static void _Side_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Side_Validate(r);
                }
                private static string _Side_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Side;
                }
                private static void _Side_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Side = v;
                }
                private static void _Side_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Side_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    ShortSaleLocate = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "ShortSaleLocate",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ShortSaleLocate_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ShortSaleLocate_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ShortSaleLocate_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ShortSaleLocate_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ShortSaleLocate_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ShortSaleLocate_OnValueChanged);
                private static void _ShortSaleLocate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._ShortSaleLocate, sf);
                }
                private static bool _ShortSaleLocate_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.ShortSaleLocate_IsReadOnly(ref result);
                    return result;
                }
                private static void _ShortSaleLocate_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ShortSaleLocate_Validate(r);
                }
                private static string _ShortSaleLocate_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.ShortSaleLocate;
                }
                private static void _ShortSaleLocate_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ShortSaleLocate = v;
                }
                private static void _ShortSaleLocate_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.ShortSaleLocate_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    OrdType = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "OrdType",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._OrdType_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._OrdType_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._OrdType_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._OrdType_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._OrdType_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._OrdType_OnValueChanged);
                private static void _OrdType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._OrdType, sf);
                }
                private static bool _OrdType_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.OrdType_IsReadOnly(ref result);
                    return result;
                }
                private static void _OrdType_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.OrdType_Validate(r);
                }
                private static string _OrdType_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.OrdType;
                }
                private static void _OrdType_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.OrdType = v;
                }
                private static void _OrdType_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.OrdType_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    TimeInForce = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "TimeInForce",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TimeInForce_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TimeInForce_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TimeInForce_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TimeInForce_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TimeInForce_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TimeInForce_OnValueChanged);
                private static void _TimeInForce_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._TimeInForce, sf);
                }
                private static bool _TimeInForce_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.TimeInForce_IsReadOnly(ref result);
                    return result;
                }
                private static void _TimeInForce_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TimeInForce_Validate(r);
                }
                private static string _TimeInForce_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.TimeInForce;
                }
                private static void _TimeInForce_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.TimeInForce = v;
                }
                private static void _TimeInForce_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.TimeInForce_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    TIFDateTime = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "TIFDateTime",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TIFDateTime_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TIFDateTime_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TIFDateTime_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TIFDateTime_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TIFDateTime_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TIFDateTime_OnValueChanged);
                private static void _TIFDateTime_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._TIFDateTime, sf);
                }
                private static bool _TIFDateTime_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.TIFDateTime_IsReadOnly(ref result);
                    return result;
                }
                private static void _TIFDateTime_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TIFDateTime_Validate(r);
                }
                private static string _TIFDateTime_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.TIFDateTime;
                }
                private static void _TIFDateTime_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.TIFDateTime = v;
                }
                private static void _TIFDateTime_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.TIFDateTime_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry
                    QtyLimit = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry(
                        "QtyLimit",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._QtyLimit_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._QtyLimit_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._QtyLimit_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._QtyLimit_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._QtyLimit_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._QtyLimit_OnValueChanged);
                private static void _QtyLimit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._QtyLimit, sf);
                }
                private static bool _QtyLimit_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.QtyLimit_IsReadOnly(ref result);
                    return result;
                }
                private static void _QtyLimit_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.QtyLimit_Validate(r);
                }
                private static double _QtyLimit_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.QtyLimit;
                }
                private static void _QtyLimit_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, double v)
                {
                    d.ImplementationEntity.QtyLimit = v;
                }
                private static void _QtyLimit_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.QtyLimit_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry
                    MaxIterations = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry(
                        "MaxIterations",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxIterations_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxIterations_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxIterations_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxIterations_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxIterations_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxIterations_OnValueChanged);
                private static void _MaxIterations_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._MaxIterations, sf);
                }
                private static bool _MaxIterations_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.MaxIterations_IsReadOnly(ref result);
                    return result;
                }
                private static void _MaxIterations_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MaxIterations_Validate(r);
                }
                private static int _MaxIterations_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.MaxIterations;
                }
                private static void _MaxIterations_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, int v)
                {
                    d.ImplementationEntity.MaxIterations = v;
                }
                private static void _MaxIterations_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.MaxIterations_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry
                    MaxEntries = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry(
                        "MaxEntries",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxEntries_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxEntries_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxEntries_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxEntries_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxEntries_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxEntries_OnValueChanged);
                private static void _MaxEntries_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._MaxEntries, sf);
                }
                private static bool _MaxEntries_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.MaxEntries_IsReadOnly(ref result);
                    return result;
                }
                private static void _MaxEntries_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MaxEntries_Validate(r);
                }
                private static int _MaxEntries_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.MaxEntries;
                }
                private static void _MaxEntries_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, int v)
                {
                    d.ImplementationEntity.MaxEntries = v;
                }
                private static void _MaxEntries_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.MaxEntries_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry
                    MaxPrice = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry(
                        "MaxPrice",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxPrice_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxPrice_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxPrice_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxPrice_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxPrice_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxPrice_OnValueChanged);
                private static void _MaxPrice_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._MaxPrice, sf);
                }
                private static bool _MaxPrice_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.MaxPrice_IsReadOnly(ref result);
                    return result;
                }
                private static void _MaxPrice_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MaxPrice_Validate(r);
                }
                private static double _MaxPrice_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.MaxPrice;
                }
                private static void _MaxPrice_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, double v)
                {
                    d.ImplementationEntity.MaxPrice = v;
                }
                private static void _MaxPrice_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.MaxPrice_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry
                    MinPrice = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry(
                        "MinPrice",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MinPrice_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MinPrice_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MinPrice_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MinPrice_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MinPrice_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MinPrice_OnValueChanged);
                private static void _MinPrice_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._MinPrice, sf);
                }
                private static bool _MinPrice_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.MinPrice_IsReadOnly(ref result);
                    return result;
                }
                private static void _MinPrice_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MinPrice_Validate(r);
                }
                private static double _MinPrice_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.MinPrice;
                }
                private static void _MinPrice_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, double v)
                {
                    d.ImplementationEntity.MinPrice = v;
                }
                private static void _MinPrice_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.MinPrice_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry
                    Qty = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry(
                        "Qty",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Qty_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Qty_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Qty_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Qty_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Qty_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Qty_OnValueChanged);
                private static void _Qty_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Qty, sf);
                }
                private static bool _Qty_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Qty_IsReadOnly(ref result);
                    return result;
                }
                private static void _Qty_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Qty_Validate(r);
                }
                private static double _Qty_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Qty;
                }
                private static void _Qty_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, double v)
                {
                    d.ImplementationEntity.Qty = v;
                }
                private static void _Qty_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Qty_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.Nullable<double>>.Entry
                    MaxFloor = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.Nullable<double>>.Entry(
                        "MaxFloor",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxFloor_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxFloor_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxFloor_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxFloor_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxFloor_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._MaxFloor_OnValueChanged);
                private static void _MaxFloor_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.Nullable<double>>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._MaxFloor, sf);
                }
                private static bool _MaxFloor_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.MaxFloor_IsReadOnly(ref result);
                    return result;
                }
                private static void _MaxFloor_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.MaxFloor_Validate(r);
                }
                private static global::System.Nullable<double> _MaxFloor_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.MaxFloor;
                }
                private static void _MaxFloor_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, global::System.Nullable<double> v)
                {
                    d.ImplementationEntity.MaxFloor = v;
                }
                private static void _MaxFloor_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.MaxFloor_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry
                    Price = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry(
                        "Price",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Price_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Price_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Price_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Price_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Price_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Price_OnValueChanged);
                private static void _Price_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Price, sf);
                }
                private static bool _Price_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Price_IsReadOnly(ref result);
                    return result;
                }
                private static void _Price_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Price_Validate(r);
                }
                private static double _Price_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Price;
                }
                private static void _Price_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, double v)
                {
                    d.ImplementationEntity.Price = v;
                }
                private static void _Price_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Price_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry
                    FlattenOnExit = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry(
                        "FlattenOnExit",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._FlattenOnExit_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._FlattenOnExit_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._FlattenOnExit_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._FlattenOnExit_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._FlattenOnExit_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._FlattenOnExit_OnValueChanged);
                private static void _FlattenOnExit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._FlattenOnExit, sf);
                }
                private static bool _FlattenOnExit_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.FlattenOnExit_IsReadOnly(ref result);
                    return result;
                }
                private static void _FlattenOnExit_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.FlattenOnExit_Validate(r);
                }
                private static bool _FlattenOnExit_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.FlattenOnExit;
                }
                private static void _FlattenOnExit_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.FlattenOnExit = v;
                }
                private static void _FlattenOnExit_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.FlattenOnExit_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry
                    CancelOnExit = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry(
                        "CancelOnExit",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CancelOnExit_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CancelOnExit_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CancelOnExit_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CancelOnExit_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CancelOnExit_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CancelOnExit_OnValueChanged);
                private static void _CancelOnExit_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._CancelOnExit, sf);
                }
                private static bool _CancelOnExit_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.CancelOnExit_IsReadOnly(ref result);
                    return result;
                }
                private static void _CancelOnExit_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CancelOnExit_Validate(r);
                }
                private static bool _CancelOnExit_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.CancelOnExit;
                }
                private static void _CancelOnExit_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.CancelOnExit = v;
                }
                private static void _CancelOnExit_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.CancelOnExit_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry
                    UseStrategyTimes = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry(
                        "UseStrategyTimes",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UseStrategyTimes_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UseStrategyTimes_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UseStrategyTimes_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UseStrategyTimes_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UseStrategyTimes_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UseStrategyTimes_OnValueChanged);
                private static void _UseStrategyTimes_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._UseStrategyTimes, sf);
                }
                private static bool _UseStrategyTimes_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.UseStrategyTimes_IsReadOnly(ref result);
                    return result;
                }
                private static void _UseStrategyTimes_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UseStrategyTimes_Validate(r);
                }
                private static bool _UseStrategyTimes_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.UseStrategyTimes;
                }
                private static void _UseStrategyTimes_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.UseStrategyTimes = v;
                }
                private static void _UseStrategyTimes_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.UseStrategyTimes_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Entry
                    StartTime = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Entry(
                        "StartTime",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StartTime_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StartTime_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StartTime_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StartTime_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StartTime_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StartTime_OnValueChanged);
                private static void _StartTime_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._StartTime, sf);
                }
                private static bool _StartTime_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.StartTime_IsReadOnly(ref result);
                    return result;
                }
                private static void _StartTime_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.StartTime_Validate(r);
                }
                private static global::System.DateTime _StartTime_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.StartTime;
                }
                private static void _StartTime_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.StartTime = global::LightSwitchApplication.Strategy.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _StartTime_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.StartTime_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Entry
                    EndTime = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Entry(
                        "EndTime",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EndTime_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EndTime_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EndTime_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EndTime_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EndTime_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EndTime_OnValueChanged);
                private static void _EndTime_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._EndTime, sf);
                }
                private static bool _EndTime_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.EndTime_IsReadOnly(ref result);
                    return result;
                }
                private static void _EndTime_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EndTime_Validate(r);
                }
                private static global::System.DateTime _EndTime_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.EndTime;
                }
                private static void _EndTime_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.EndTime = global::LightSwitchApplication.Strategy.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _EndTime_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.EndTime_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    UserName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "UserName",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserName_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserName_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserName_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserName_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._UserName_OnValueChanged);
                private static void _UserName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._UserName, sf);
                }
                private static bool _UserName_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.UserName_IsReadOnly(ref result);
                    return result;
                }
                private static void _UserName_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UserName_Validate(r);
                }
                private static string _UserName_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.UserName;
                }
                private static void _UserName_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.UserName = v;
                }
                private static void _UserName_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.UserName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry
                    StopPx = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Entry(
                        "StopPx",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StopPx_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StopPx_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StopPx_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StopPx_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StopPx_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._StopPx_OnValueChanged);
                private static void _StopPx_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._StopPx, sf);
                }
                private static bool _StopPx_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.StopPx_IsReadOnly(ref result);
                    return result;
                }
                private static void _StopPx_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.StopPx_Validate(r);
                }
                private static double _StopPx_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.StopPx;
                }
                private static void _StopPx_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, double v)
                {
                    d.ImplementationEntity.StopPx = v;
                }
                private static void _StopPx_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.StopPx_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    Account = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "Account",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Account_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Account_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Account_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Account_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Account_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Account_OnValueChanged);
                private static void _Account_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Account, sf);
                }
                private static bool _Account_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Account_IsReadOnly(ref result);
                    return result;
                }
                private static void _Account_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Account_Validate(r);
                }
                private static string _Account_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Account;
                }
                private static void _Account_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Account = v;
                }
                private static void _Account_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Account_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry
                    Type = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry(
                        "Type",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Type_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Type_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Type_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Type_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Type_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Type_OnValueChanged);
                private static void _Type_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Type, sf);
                }
                private static bool _Type_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Type_IsReadOnly(ref result);
                    return result;
                }
                private static void _Type_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Type_Validate(r);
                }
                private static int _Type_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Type;
                }
                private static void _Type_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Type = v;
                }
                private static void _Type_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Type_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    PXAlgorithmName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "PXAlgorithmName",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._PXAlgorithmName_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._PXAlgorithmName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._PXAlgorithmName_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._PXAlgorithmName_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._PXAlgorithmName_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._PXAlgorithmName_OnValueChanged);
                private static void _PXAlgorithmName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._PXAlgorithmName, sf);
                }
                private static bool _PXAlgorithmName_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.PXAlgorithmName_IsReadOnly(ref result);
                    return result;
                }
                private static void _PXAlgorithmName_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PXAlgorithmName_Validate(r);
                }
                private static string _PXAlgorithmName_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.PXAlgorithmName;
                }
                private static void _PXAlgorithmName_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.PXAlgorithmName = v;
                }
                private static void _PXAlgorithmName_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.PXAlgorithmName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    TriggerName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "TriggerName",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TriggerName_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TriggerName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TriggerName_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TriggerName_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TriggerName_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TriggerName_OnValueChanged);
                private static void _TriggerName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._TriggerName, sf);
                }
                private static bool _TriggerName_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.TriggerName_IsReadOnly(ref result);
                    return result;
                }
                private static void _TriggerName_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TriggerName_Validate(r);
                }
                private static string _TriggerName_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.TriggerName;
                }
                private static void _TriggerName_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.TriggerName = v;
                }
                private static void _TriggerName_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.TriggerName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    EntryTriggerName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "EntryTriggerName",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EntryTriggerName_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EntryTriggerName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EntryTriggerName_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EntryTriggerName_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EntryTriggerName_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._EntryTriggerName_OnValueChanged);
                private static void _EntryTriggerName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._EntryTriggerName, sf);
                }
                private static bool _EntryTriggerName_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.EntryTriggerName_IsReadOnly(ref result);
                    return result;
                }
                private static void _EntryTriggerName_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EntryTriggerName_Validate(r);
                }
                private static string _EntryTriggerName_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.EntryTriggerName;
                }
                private static void _EntryTriggerName_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.EntryTriggerName = v;
                }
                private static void _EntryTriggerName_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.EntryTriggerName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry
                    AutoConnectTrg = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry(
                        "AutoConnectTrg",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._AutoConnectTrg_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._AutoConnectTrg_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._AutoConnectTrg_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._AutoConnectTrg_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._AutoConnectTrg_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._AutoConnectTrg_OnValueChanged);
                private static void _AutoConnectTrg_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._AutoConnectTrg, sf);
                }
                private static bool _AutoConnectTrg_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.AutoConnectTrg_IsReadOnly(ref result);
                    return result;
                }
                private static void _AutoConnectTrg_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.AutoConnectTrg_Validate(r);
                }
                private static bool _AutoConnectTrg_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.AutoConnectTrg;
                }
                private static void _AutoConnectTrg_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.AutoConnectTrg = v;
                }
                private static void _AutoConnectTrg_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.AutoConnectTrg_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry
                    ConditionInterval = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry(
                        "ConditionInterval",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ConditionInterval_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ConditionInterval_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ConditionInterval_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ConditionInterval_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ConditionInterval_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ConditionInterval_OnValueChanged);
                private static void _ConditionInterval_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._ConditionInterval, sf);
                }
                private static bool _ConditionInterval_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.ConditionInterval_IsReadOnly(ref result);
                    return result;
                }
                private static void _ConditionInterval_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ConditionInterval_Validate(r);
                }
                private static int _ConditionInterval_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.ConditionInterval;
                }
                private static void _ConditionInterval_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, int v)
                {
                    d.ImplementationEntity.ConditionInterval = v;
                }
                private static void _ConditionInterval_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.ConditionInterval_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry
                    Enabled = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry(
                        "Enabled",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Enabled_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Enabled_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Enabled_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Enabled_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Enabled_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Enabled_OnValueChanged);
                private static void _Enabled_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Enabled, sf);
                }
                private static bool _Enabled_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Enabled_IsReadOnly(ref result);
                    return result;
                }
                private static void _Enabled_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Enabled_Validate(r);
                }
                private static bool _Enabled_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Enabled;
                }
                private static void _Enabled_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Enabled = v;
                }
                private static void _Enabled_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Enabled_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    ORAlgorithmName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "ORAlgorithmName",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ORAlgorithmName_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ORAlgorithmName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ORAlgorithmName_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ORAlgorithmName_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ORAlgorithmName_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ORAlgorithmName_OnValueChanged);
                private static void _ORAlgorithmName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._ORAlgorithmName, sf);
                }
                private static bool _ORAlgorithmName_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.ORAlgorithmName_IsReadOnly(ref result);
                    return result;
                }
                private static void _ORAlgorithmName_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ORAlgorithmName_Validate(r);
                }
                private static string _ORAlgorithmName_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.ORAlgorithmName;
                }
                private static void _ORAlgorithmName_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ORAlgorithmName = v;
                }
                private static void _ORAlgorithmName_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.ORAlgorithmName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    ParameterBag = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "ParameterBag",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ParameterBag_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ParameterBag_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ParameterBag_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ParameterBag_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ParameterBag_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._ParameterBag_OnValueChanged);
                private static void _ParameterBag_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._ParameterBag, sf);
                }
                private static bool _ParameterBag_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.ParameterBag_IsReadOnly(ref result);
                    return result;
                }
                private static void _ParameterBag_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ParameterBag_Validate(r);
                }
                private static string _ParameterBag_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.ParameterBag;
                }
                private static void _ParameterBag_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ParameterBag = v;
                }
                private static void _ParameterBag_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.ParameterBag_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    RunIdentifier = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "RunIdentifier",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._RunIdentifier_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._RunIdentifier_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._RunIdentifier_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._RunIdentifier_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._RunIdentifier_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._RunIdentifier_OnValueChanged);
                private static void _RunIdentifier_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._RunIdentifier, sf);
                }
                private static bool _RunIdentifier_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.RunIdentifier_IsReadOnly(ref result);
                    return result;
                }
                private static void _RunIdentifier_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RunIdentifier_Validate(r);
                }
                private static string _RunIdentifier_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.RunIdentifier;
                }
                private static void _RunIdentifier_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.RunIdentifier = v;
                }
                private static void _RunIdentifier_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.RunIdentifier_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    CorrelationID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "CorrelationID",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CorrelationID_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CorrelationID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CorrelationID_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CorrelationID_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CorrelationID_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._CorrelationID_OnValueChanged);
                private static void _CorrelationID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._CorrelationID, sf);
                }
                private static bool _CorrelationID_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.CorrelationID_IsReadOnly(ref result);
                    return result;
                }
                private static void _CorrelationID_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.CorrelationID_Validate(r);
                }
                private static string _CorrelationID_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.CorrelationID;
                }
                private static void _CorrelationID_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.CorrelationID = v;
                }
                private static void _CorrelationID_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.CorrelationID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    TSQueryGroupPath = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "TSQueryGroupPath",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TSQueryGroupPath_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TSQueryGroupPath_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TSQueryGroupPath_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TSQueryGroupPath_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TSQueryGroupPath_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._TSQueryGroupPath_OnValueChanged);
                private static void _TSQueryGroupPath_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._TSQueryGroupPath, sf);
                }
                private static bool _TSQueryGroupPath_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.TSQueryGroupPath_IsReadOnly(ref result);
                    return result;
                }
                private static void _TSQueryGroupPath_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TSQueryGroupPath_Validate(r);
                }
                private static string _TSQueryGroupPath_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.TSQueryGroupPath;
                }
                private static void _TSQueryGroupPath_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.TSQueryGroupPath = v;
                }
                private static void _TSQueryGroupPath_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.TSQueryGroupPath_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry
                    Info = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Entry(
                        "Info",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Info_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Info_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Info_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Info_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Info_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Info_OnValueChanged);
                private static void _Info_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Info, sf);
                }
                private static bool _Info_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Info_IsReadOnly(ref result);
                    return result;
                }
                private static void _Info_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Info_Validate(r);
                }
                private static string _Info_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Info;
                }
                private static void _Info_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Info = v;
                }
                private static void _Info_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Info_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry
                    State = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Entry(
                        "State",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._State_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._State_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._State_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._State_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._State_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._State_OnValueChanged);
                private static void _State_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._State, sf);
                }
                private static bool _State_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.State_IsReadOnly(ref result);
                    return result;
                }
                private static void _State_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.State_Validate(r);
                }
                private static int _State_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.State;
                }
                private static void _State_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, int v)
                {
                    d.ImplementationEntity.State = v;
                }
                private static void _State_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.State_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry
                    Initialized = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Entry(
                        "Initialized",
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Initialized_Stub,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Initialized_ComputeIsReadOnly,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Initialized_Validate,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Initialized_GetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Initialized_SetImplementationValue,
                        global::LightSwitchApplication.Strategy.DetailsClass.PropertySetProperties._Initialized_OnValueChanged);
                private static void _Initialized_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Strategy.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data> c, global::LightSwitchApplication.Strategy.DetailsClass d, object sf)
                {
                    c(d, ref d._Initialized, sf);
                }
                private static bool _Initialized_ComputeIsReadOnly(global::LightSwitchApplication.Strategy e)
                {
                    bool result = false;
                    e.Initialized_IsReadOnly(ref result);
                    return result;
                }
                private static void _Initialized_Validate(global::LightSwitchApplication.Strategy e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Initialized_Validate(r);
                }
                private static bool _Initialized_GetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d)
                {
                    return d.ImplementationEntity.Initialized;
                }
                private static void _Initialized_SetImplementationValue(global::LightSwitchApplication.Strategy.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Initialized = v;
                }
                private static void _Initialized_OnValueChanged(global::LightSwitchApplication.Strategy e)
                {
                    e.Initialized_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _LastOrdIdentity;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _UserID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _Identity;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _ProductID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _Mnemonic;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _DataMnemonic;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _Side;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _ShortSaleLocate;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _OrdType;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _TimeInForce;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _TIFDateTime;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data _QtyLimit;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data _MaxIterations;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data _MaxEntries;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data _MaxPrice;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data _MinPrice;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data _Qty;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.Nullable<double>>.Data _MaxFloor;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data _Price;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data _FlattenOnExit;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data _CancelOnExit;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data _UseStrategyTimes;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Data _StartTime;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, global::System.DateTime>.Data _EndTime;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _UserName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, double>.Data _StopPx;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _Account;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data _Type;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _PXAlgorithmName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _TriggerName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _EntryTriggerName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data _AutoConnectTrg;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data _ConditionInterval;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data _Enabled;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _ORAlgorithmName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _ParameterBag;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _RunIdentifier;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _CorrelationID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _TSQueryGroupPath;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, string>.Data _Info;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, int>.Data _State;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Strategy, global::LightSwitchApplication.Strategy.DetailsClass, bool>.Data _Initialized;
            
        }
    
        #endregion
    }
    
    #endregion
}
