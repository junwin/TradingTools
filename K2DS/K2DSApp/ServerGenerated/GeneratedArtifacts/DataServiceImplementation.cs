//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class AAK2DSDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::AAK2DSData.Implementation.AAK2DSDataObjectContext>
    {
    
        public AAK2DSDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Account
    
        public void InsertAccount(global::AAK2DSData.Implementation.Account entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Accounts.AddObject(entity);
            }
        }
    
        public void UpdateAccount(global::AAK2DSData.Implementation.Account currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Accounts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteAccount(global::AAK2DSData.Implementation.Account entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Accounts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region AccountAllocation
    
        public void InsertAccountAllocation(global::AAK2DSData.Implementation.AccountAllocation entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.AccountAllocations.AddObject(entity);
            }
        }
    
        public void UpdateAccountAllocation(global::AAK2DSData.Implementation.AccountAllocation currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.AccountAllocations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteAccountAllocation(global::AAK2DSData.Implementation.AccountAllocation entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.AccountAllocations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Allocation
    
        public void InsertAllocation(global::AAK2DSData.Implementation.Allocation entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Allocations.AddObject(entity);
            }
        }
    
        public void UpdateAllocation(global::AAK2DSData.Implementation.Allocation currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Allocations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteAllocation(global::AAK2DSData.Implementation.Allocation entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Allocations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Fill
    
        public void InsertFill(global::AAK2DSData.Implementation.Fill entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Fills.AddObject(entity);
            }
        }
    
        public void UpdateFill(global::AAK2DSData.Implementation.Fill currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Fills, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteFill(global::AAK2DSData.Implementation.Fill entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Fills.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Firm
    
        public void InsertFirm(global::AAK2DSData.Implementation.Firm entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Firms.AddObject(entity);
            }
        }
    
        public void UpdateFirm(global::AAK2DSData.Implementation.Firm currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Firms, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteFirm(global::AAK2DSData.Implementation.Firm entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Firms.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Order
    
        public void InsertOrder(global::AAK2DSData.Implementation.Order entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Orders.AddObject(entity);
            }
        }
    
        public void UpdateOrder(global::AAK2DSData.Implementation.Order currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Orders, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteOrder(global::AAK2DSData.Implementation.Order entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Orders.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Product
    
        public void InsertProduct(global::AAK2DSData.Implementation.Product entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Products.AddObject(entity);
            }
        }
    
        public void UpdateProduct(global::AAK2DSData.Implementation.Product currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Products, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteProduct(global::AAK2DSData.Implementation.Product entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Products.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Strategy
    
        public void InsertStrategy(global::AAK2DSData.Implementation.Strategy entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Strategies.AddObject(entity);
            }
        }
    
        public void UpdateStrategy(global::AAK2DSData.Implementation.Strategy currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Strategies, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteStrategy(global::AAK2DSData.Implementation.Strategy entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Strategies.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region User
    
        public void InsertUser(global::AAK2DSData.Implementation.User entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Users.AddObject(entity);
            }
        }
    
        public void UpdateUser(global::AAK2DSData.Implementation.User currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Users, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUser(global::AAK2DSData.Implementation.User entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Users.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Venue
    
        public void InsertVenue(global::AAK2DSData.Implementation.Venue entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Venues.AddObject(entity);
            }
        }
    
        public void UpdateVenue(global::AAK2DSData.Implementation.Venue currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Venues, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteVenue(global::AAK2DSData.Implementation.Venue entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Venues.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> Accounts_Single(string frameworkOperators, string Identity)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Account>("Accounts_Single", frameworkOperators, Identity);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> Accounts_SingleOrDefault(string frameworkOperators, string Identity)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Account>("Accounts_SingleOrDefault", frameworkOperators, Identity);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> Accounts_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Account>("Accounts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> AccountAllocations_Single(string frameworkOperators, global::System.Nullable<double> Ratio, global::System.Nullable<double> Amount, global::System.Nullable<double> TranchSize, global::System.Nullable<bool> Enabled)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.AccountAllocation>("AccountAllocations_Single", frameworkOperators, Ratio, Amount, TranchSize, Enabled);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> AccountAllocations_SingleOrDefault(string frameworkOperators, global::System.Nullable<double> Ratio, global::System.Nullable<double> Amount, global::System.Nullable<double> TranchSize, global::System.Nullable<bool> Enabled)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.AccountAllocation>("AccountAllocations_SingleOrDefault", frameworkOperators, Ratio, Amount, TranchSize, Enabled);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> AccountAllocations_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.AccountAllocation>("AccountAllocations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> Allocations_Single(string frameworkOperators, global::System.Nullable<double> MinOrderSize, global::System.Nullable<double> TotalQty)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Allocation>("Allocations_Single", frameworkOperators, MinOrderSize, TotalQty);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> Allocations_SingleOrDefault(string frameworkOperators, global::System.Nullable<double> MinOrderSize, global::System.Nullable<double> TotalQty)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Allocation>("Allocations_SingleOrDefault", frameworkOperators, MinOrderSize, TotalQty);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> Allocations_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Allocation>("Allocations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> Fills_Single(string frameworkOperators, global::System.Nullable<double> AvgPx, global::System.Nullable<double> LeavesQty, global::System.Nullable<double> CumQty, global::System.Nullable<long> Ticks, global::System.Nullable<double> FillQty, global::System.Nullable<double> LastPx)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Fill>("Fills_Single", frameworkOperators, AvgPx, LeavesQty, CumQty, Ticks, FillQty, LastPx);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> Fills_SingleOrDefault(string frameworkOperators, global::System.Nullable<double> AvgPx, global::System.Nullable<double> LeavesQty, global::System.Nullable<double> CumQty, global::System.Nullable<long> Ticks, global::System.Nullable<double> FillQty, global::System.Nullable<double> LastPx)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Fill>("Fills_SingleOrDefault", frameworkOperators, AvgPx, LeavesQty, CumQty, Ticks, FillQty, LastPx);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> Fills_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Fill>("Fills_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> Firms_Single(string frameworkOperators, global::System.Nullable<int> FirmType, global::System.Nullable<bool> External)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Firm>("Firms_Single", frameworkOperators, FirmType, External);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> Firms_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> FirmType, global::System.Nullable<bool> External)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Firm>("Firms_SingleOrDefault", frameworkOperators, FirmType, External);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> Firms_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Firm>("Firms_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> Orders_Single(string frameworkOperators, global::System.Nullable<int> AutoTradeProcessCount, global::System.Nullable<double> AvgPx, global::System.Nullable<double> CumQty, global::System.Nullable<bool> IsAutoTrade, global::System.Nullable<double> LastPx, global::System.Nullable<double> LastQty, global::System.Nullable<double> LeavesQty, global::System.Nullable<long> MaxFloor, global::System.Nullable<long> OrderQty, global::System.Nullable<double> Price, global::System.Nullable<double> QuantityLimit, global::System.Nullable<double> StopPx)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Order>("Orders_Single", frameworkOperators, AutoTradeProcessCount, AvgPx, CumQty, IsAutoTrade, LastPx, LastQty, LeavesQty, MaxFloor, OrderQty, Price, QuantityLimit, StopPx);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> Orders_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> AutoTradeProcessCount, global::System.Nullable<double> AvgPx, global::System.Nullable<double> CumQty, global::System.Nullable<bool> IsAutoTrade, global::System.Nullable<double> LastPx, global::System.Nullable<double> LastQty, global::System.Nullable<double> LeavesQty, global::System.Nullable<long> MaxFloor, global::System.Nullable<long> OrderQty, global::System.Nullable<double> Price, global::System.Nullable<double> QuantityLimit, global::System.Nullable<double> StopPx)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Order>("Orders_SingleOrDefault", frameworkOperators, AutoTradeProcessCount, AvgPx, CumQty, IsAutoTrade, LastPx, LastQty, LeavesQty, MaxFloor, OrderQty, Price, QuantityLimit, StopPx);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> Orders_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Order>("Orders_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> Products_Single(string frameworkOperators, global::System.Nullable<int> QtyIncrement, global::System.Nullable<double> StrikePrice, global::System.Nullable<double> TickSize, global::System.Nullable<double> TickValue, global::System.Nullable<int> NumberDecimalPlaces, global::System.Nullable<int> PriceFeedQuantityMultiplier, global::System.Nullable<double> ContractSize, global::System.Nullable<int> DepthLevelCount)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Product>("Products_Single", frameworkOperators, QtyIncrement, StrikePrice, TickSize, TickValue, NumberDecimalPlaces, PriceFeedQuantityMultiplier, ContractSize, DepthLevelCount);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> Products_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> QtyIncrement, global::System.Nullable<double> StrikePrice, global::System.Nullable<double> TickSize, global::System.Nullable<double> TickValue, global::System.Nullable<int> NumberDecimalPlaces, global::System.Nullable<int> PriceFeedQuantityMultiplier, global::System.Nullable<double> ContractSize, global::System.Nullable<int> DepthLevelCount)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Product>("Products_SingleOrDefault", frameworkOperators, QtyIncrement, StrikePrice, TickSize, TickValue, NumberDecimalPlaces, PriceFeedQuantityMultiplier, ContractSize, DepthLevelCount);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> Products_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Product>("Products_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> Strategies_Single(string frameworkOperators, global::System.Nullable<double> QtyLimit, global::System.Nullable<int> MaxIterations, global::System.Nullable<int> MaxEntries, global::System.Nullable<double> MaxPrice, global::System.Nullable<double> MinPrice, global::System.Nullable<double> Qty, global::System.Nullable<double> Price, global::System.Nullable<bool> FlattenOnExit, global::System.Nullable<bool> CancelOnExit, global::System.Nullable<bool> UseStrategyTimes, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, global::System.Nullable<double> StopPx, global::System.Nullable<int> Type, global::System.Nullable<bool> AutoConnectTrg, global::System.Nullable<int> ConditionInterval, global::System.Nullable<bool> Enabled, global::System.Nullable<int> State, global::System.Nullable<bool> Initialized)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Strategy>("Strategies_Single", frameworkOperators, QtyLimit, MaxIterations, MaxEntries, MaxPrice, MinPrice, Qty, Price, FlattenOnExit, CancelOnExit, UseStrategyTimes, StartTime, EndTime, StopPx, Type, AutoConnectTrg, ConditionInterval, Enabled, State, Initialized);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> Strategies_SingleOrDefault(string frameworkOperators, global::System.Nullable<double> QtyLimit, global::System.Nullable<int> MaxIterations, global::System.Nullable<int> MaxEntries, global::System.Nullable<double> MaxPrice, global::System.Nullable<double> MinPrice, global::System.Nullable<double> Qty, global::System.Nullable<double> Price, global::System.Nullable<bool> FlattenOnExit, global::System.Nullable<bool> CancelOnExit, global::System.Nullable<bool> UseStrategyTimes, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, global::System.Nullable<double> StopPx, global::System.Nullable<int> Type, global::System.Nullable<bool> AutoConnectTrg, global::System.Nullable<int> ConditionInterval, global::System.Nullable<bool> Enabled, global::System.Nullable<int> State, global::System.Nullable<bool> Initialized)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Strategy>("Strategies_SingleOrDefault", frameworkOperators, QtyLimit, MaxIterations, MaxEntries, MaxPrice, MinPrice, Qty, Price, FlattenOnExit, CancelOnExit, UseStrategyTimes, StartTime, EndTime, StopPx, Type, AutoConnectTrg, ConditionInterval, Enabled, State, Initialized);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> Strategies_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Strategy>("Strategies_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> Users_Single(string frameworkOperators, global::System.Nullable<bool> Enabled)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.User>("Users_Single", frameworkOperators, Enabled);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> Users_SingleOrDefault(string frameworkOperators, global::System.Nullable<bool> Enabled)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.User>("Users_SingleOrDefault", frameworkOperators, Enabled);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> Users_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.User>("Users_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> Venues_Single(string frameworkOperators, global::System.Nullable<bool> UseSymbol)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Venue>("Venues_Single", frameworkOperators, UseSymbol);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> Venues_SingleOrDefault(string frameworkOperators, global::System.Nullable<bool> UseSymbol)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Venue>("Venues_SingleOrDefault", frameworkOperators, UseSymbol);
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> Venues_All(string frameworkOperators)
        {
            return this.GetQuery<global::AAK2DSData.Implementation.Venue>("Venues_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().AAK2DSData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class AAK2DSDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::AAK2DSData.Implementation.AAK2DSDataObjectContext>
    {
        public AAK2DSDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> Accounts_Single(string Identity)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Account>("Accounts_All"),
                (a) => (a.Identity.CompareTo(Identity) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> Accounts_SingleOrDefault(string Identity)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Account>("Accounts_All"),
                (a) => (a.Identity.CompareTo(Identity) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> Accounts_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Account> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Account>("[Accounts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> AccountAllocations_Single(global::System.Nullable<double> Ratio, global::System.Nullable<double> Amount, global::System.Nullable<double> TranchSize, global::System.Nullable<bool> Enabled)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.AccountAllocation>("AccountAllocations_All"),
                (a) => ((((Enabled.HasValue && (a.Enabled == Enabled)) && (TranchSize.HasValue && (a.TranchSize == TranchSize))) && (Amount.HasValue && (a.Amount == Amount))) && (Ratio.HasValue && (a.Ratio == Ratio))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> AccountAllocations_SingleOrDefault(global::System.Nullable<double> Ratio, global::System.Nullable<double> Amount, global::System.Nullable<double> TranchSize, global::System.Nullable<bool> Enabled)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.AccountAllocation>("AccountAllocations_All"),
                (a) => ((((Enabled.HasValue && (a.Enabled == Enabled)) && (TranchSize.HasValue && (a.TranchSize == TranchSize))) && (Amount.HasValue && (a.Amount == Amount))) && (Ratio.HasValue && (a.Ratio == Ratio))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> AccountAllocations_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.AccountAllocation> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.AccountAllocation>("[AccountAllocations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> Allocations_Single(global::System.Nullable<double> MinOrderSize, global::System.Nullable<double> TotalQty)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Allocation>("Allocations_All"),
                (a) => ((TotalQty.HasValue && (a.TotalQty == TotalQty)) && (MinOrderSize.HasValue && (a.MinOrderSize == MinOrderSize))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> Allocations_SingleOrDefault(global::System.Nullable<double> MinOrderSize, global::System.Nullable<double> TotalQty)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Allocation>("Allocations_All"),
                (a) => ((TotalQty.HasValue && (a.TotalQty == TotalQty)) && (MinOrderSize.HasValue && (a.MinOrderSize == MinOrderSize))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> Allocations_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Allocation> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Allocation>("[Allocations]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> Fills_Single(global::System.Nullable<double> AvgPx, global::System.Nullable<double> LeavesQty, global::System.Nullable<double> CumQty, global::System.Nullable<long> Ticks, global::System.Nullable<double> FillQty, global::System.Nullable<double> LastPx)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Fill>("Fills_All"),
                (f) => ((((((LastPx.HasValue && (f.LastPx == LastPx)) && (FillQty.HasValue && (f.FillQty == FillQty))) && (Ticks.HasValue && (f.Ticks == Ticks))) && (CumQty.HasValue && (f.CumQty == CumQty))) && (LeavesQty.HasValue && (f.LeavesQty == LeavesQty))) && (AvgPx.HasValue && (f.AvgPx == AvgPx))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> Fills_SingleOrDefault(global::System.Nullable<double> AvgPx, global::System.Nullable<double> LeavesQty, global::System.Nullable<double> CumQty, global::System.Nullable<long> Ticks, global::System.Nullable<double> FillQty, global::System.Nullable<double> LastPx)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Fill>("Fills_All"),
                (f) => ((((((LastPx.HasValue && (f.LastPx == LastPx)) && (FillQty.HasValue && (f.FillQty == FillQty))) && (Ticks.HasValue && (f.Ticks == Ticks))) && (CumQty.HasValue && (f.CumQty == CumQty))) && (LeavesQty.HasValue && (f.LeavesQty == LeavesQty))) && (AvgPx.HasValue && (f.AvgPx == AvgPx))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> Fills_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Fill> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Fill>("[Fills]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> Firms_Single(global::System.Nullable<int> FirmType, global::System.Nullable<bool> External)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Firm>("Firms_All"),
                (f) => ((External.HasValue && (f.External == External)) && (FirmType.HasValue && (f.FirmType == FirmType))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> Firms_SingleOrDefault(global::System.Nullable<int> FirmType, global::System.Nullable<bool> External)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Firm>("Firms_All"),
                (f) => ((External.HasValue && (f.External == External)) && (FirmType.HasValue && (f.FirmType == FirmType))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> Firms_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Firm> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Firm>("[Firms]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> Orders_Single(global::System.Nullable<int> AutoTradeProcessCount, global::System.Nullable<double> AvgPx, global::System.Nullable<double> CumQty, global::System.Nullable<bool> IsAutoTrade, global::System.Nullable<double> LastPx, global::System.Nullable<double> LastQty, global::System.Nullable<double> LeavesQty, global::System.Nullable<long> MaxFloor, global::System.Nullable<long> OrderQty, global::System.Nullable<double> Price, global::System.Nullable<double> QuantityLimit, global::System.Nullable<double> StopPx)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Order>("Orders_All"),
                (o) => ((((((((((((StopPx.HasValue && (o.StopPx == StopPx)) && (QuantityLimit.HasValue && (o.QuantityLimit == QuantityLimit))) && (Price.HasValue && (o.Price == Price))) && (OrderQty.HasValue && (o.OrderQty == OrderQty))) && (MaxFloor.HasValue && (o.MaxFloor == MaxFloor))) && (LeavesQty.HasValue && (o.LeavesQty == LeavesQty))) && (LastQty.HasValue && (o.LastQty == LastQty))) && (LastPx.HasValue && (o.LastPx == LastPx))) && (IsAutoTrade.HasValue && (o.IsAutoTrade == IsAutoTrade))) && (CumQty.HasValue && (o.CumQty == CumQty))) && (AvgPx.HasValue && (o.AvgPx == AvgPx))) && (AutoTradeProcessCount.HasValue && (o.AutoTradeProcessCount == AutoTradeProcessCount))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> Orders_SingleOrDefault(global::System.Nullable<int> AutoTradeProcessCount, global::System.Nullable<double> AvgPx, global::System.Nullable<double> CumQty, global::System.Nullable<bool> IsAutoTrade, global::System.Nullable<double> LastPx, global::System.Nullable<double> LastQty, global::System.Nullable<double> LeavesQty, global::System.Nullable<long> MaxFloor, global::System.Nullable<long> OrderQty, global::System.Nullable<double> Price, global::System.Nullable<double> QuantityLimit, global::System.Nullable<double> StopPx)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Order>("Orders_All"),
                (o) => ((((((((((((StopPx.HasValue && (o.StopPx == StopPx)) && (QuantityLimit.HasValue && (o.QuantityLimit == QuantityLimit))) && (Price.HasValue && (o.Price == Price))) && (OrderQty.HasValue && (o.OrderQty == OrderQty))) && (MaxFloor.HasValue && (o.MaxFloor == MaxFloor))) && (LeavesQty.HasValue && (o.LeavesQty == LeavesQty))) && (LastQty.HasValue && (o.LastQty == LastQty))) && (LastPx.HasValue && (o.LastPx == LastPx))) && (IsAutoTrade.HasValue && (o.IsAutoTrade == IsAutoTrade))) && (CumQty.HasValue && (o.CumQty == CumQty))) && (AvgPx.HasValue && (o.AvgPx == AvgPx))) && (AutoTradeProcessCount.HasValue && (o.AutoTradeProcessCount == AutoTradeProcessCount))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> Orders_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Order> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Order>("[Orders]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> Products_Single(global::System.Nullable<int> QtyIncrement, global::System.Nullable<double> StrikePrice, global::System.Nullable<double> TickSize, global::System.Nullable<double> TickValue, global::System.Nullable<int> NumberDecimalPlaces, global::System.Nullable<int> PriceFeedQuantityMultiplier, global::System.Nullable<double> ContractSize, global::System.Nullable<int> DepthLevelCount)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Product>("Products_All"),
                (p) => ((((((((DepthLevelCount.HasValue && (p.DepthLevelCount == DepthLevelCount)) && (ContractSize.HasValue && (p.ContractSize == ContractSize))) && (PriceFeedQuantityMultiplier.HasValue && (p.PriceFeedQuantityMultiplier == PriceFeedQuantityMultiplier))) && (NumberDecimalPlaces.HasValue && (p.NumberDecimalPlaces == NumberDecimalPlaces))) && (TickValue.HasValue && (p.TickValue == TickValue))) && (TickSize.HasValue && (p.TickSize == TickSize))) && (StrikePrice.HasValue && (p.StrikePrice == StrikePrice))) && (QtyIncrement.HasValue && (p.QtyIncrement == QtyIncrement))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> Products_SingleOrDefault(global::System.Nullable<int> QtyIncrement, global::System.Nullable<double> StrikePrice, global::System.Nullable<double> TickSize, global::System.Nullable<double> TickValue, global::System.Nullable<int> NumberDecimalPlaces, global::System.Nullable<int> PriceFeedQuantityMultiplier, global::System.Nullable<double> ContractSize, global::System.Nullable<int> DepthLevelCount)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Product>("Products_All"),
                (p) => ((((((((DepthLevelCount.HasValue && (p.DepthLevelCount == DepthLevelCount)) && (ContractSize.HasValue && (p.ContractSize == ContractSize))) && (PriceFeedQuantityMultiplier.HasValue && (p.PriceFeedQuantityMultiplier == PriceFeedQuantityMultiplier))) && (NumberDecimalPlaces.HasValue && (p.NumberDecimalPlaces == NumberDecimalPlaces))) && (TickValue.HasValue && (p.TickValue == TickValue))) && (TickSize.HasValue && (p.TickSize == TickSize))) && (StrikePrice.HasValue && (p.StrikePrice == StrikePrice))) && (QtyIncrement.HasValue && (p.QtyIncrement == QtyIncrement))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> Products_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Product> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Product>("[Products]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> Strategies_Single(global::System.Nullable<double> QtyLimit, global::System.Nullable<int> MaxIterations, global::System.Nullable<int> MaxEntries, global::System.Nullable<double> MaxPrice, global::System.Nullable<double> MinPrice, global::System.Nullable<double> Qty, global::System.Nullable<double> Price, global::System.Nullable<bool> FlattenOnExit, global::System.Nullable<bool> CancelOnExit, global::System.Nullable<bool> UseStrategyTimes, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, global::System.Nullable<double> StopPx, global::System.Nullable<int> Type, global::System.Nullable<bool> AutoConnectTrg, global::System.Nullable<int> ConditionInterval, global::System.Nullable<bool> Enabled, global::System.Nullable<int> State, global::System.Nullable<bool> Initialized)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Strategy>("Strategies_All"),
                (s) => (((((((((((((((((((Initialized.HasValue && (s.Initialized == Initialized)) && (State.HasValue && (s.State == State))) && (Enabled.HasValue && (s.Enabled == Enabled))) && (ConditionInterval.HasValue && (s.ConditionInterval == ConditionInterval))) && (AutoConnectTrg.HasValue && (s.AutoConnectTrg == AutoConnectTrg))) && (Type.HasValue && (s.Type == Type))) && (StopPx.HasValue && (s.StopPx == StopPx))) && (EndTime.HasValue && (s.EndTime == EndTime))) && (StartTime.HasValue && (s.StartTime == StartTime))) && (UseStrategyTimes.HasValue && (s.UseStrategyTimes == UseStrategyTimes))) && (CancelOnExit.HasValue && (s.CancelOnExit == CancelOnExit))) && (FlattenOnExit.HasValue && (s.FlattenOnExit == FlattenOnExit))) && (Price.HasValue && (s.Price == Price))) && (Qty.HasValue && (s.Qty == Qty))) && (MinPrice.HasValue && (s.MinPrice == MinPrice))) && (MaxPrice.HasValue && (s.MaxPrice == MaxPrice))) && (MaxEntries.HasValue && (s.MaxEntries == MaxEntries))) && (MaxIterations.HasValue && (s.MaxIterations == MaxIterations))) && (QtyLimit.HasValue && (s.QtyLimit == QtyLimit))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> Strategies_SingleOrDefault(global::System.Nullable<double> QtyLimit, global::System.Nullable<int> MaxIterations, global::System.Nullable<int> MaxEntries, global::System.Nullable<double> MaxPrice, global::System.Nullable<double> MinPrice, global::System.Nullable<double> Qty, global::System.Nullable<double> Price, global::System.Nullable<bool> FlattenOnExit, global::System.Nullable<bool> CancelOnExit, global::System.Nullable<bool> UseStrategyTimes, global::System.Nullable<global::System.DateTime> StartTime, global::System.Nullable<global::System.DateTime> EndTime, global::System.Nullable<double> StopPx, global::System.Nullable<int> Type, global::System.Nullable<bool> AutoConnectTrg, global::System.Nullable<int> ConditionInterval, global::System.Nullable<bool> Enabled, global::System.Nullable<int> State, global::System.Nullable<bool> Initialized)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Strategy>("Strategies_All"),
                (s) => (((((((((((((((((((Initialized.HasValue && (s.Initialized == Initialized)) && (State.HasValue && (s.State == State))) && (Enabled.HasValue && (s.Enabled == Enabled))) && (ConditionInterval.HasValue && (s.ConditionInterval == ConditionInterval))) && (AutoConnectTrg.HasValue && (s.AutoConnectTrg == AutoConnectTrg))) && (Type.HasValue && (s.Type == Type))) && (StopPx.HasValue && (s.StopPx == StopPx))) && (EndTime.HasValue && (s.EndTime == EndTime))) && (StartTime.HasValue && (s.StartTime == StartTime))) && (UseStrategyTimes.HasValue && (s.UseStrategyTimes == UseStrategyTimes))) && (CancelOnExit.HasValue && (s.CancelOnExit == CancelOnExit))) && (FlattenOnExit.HasValue && (s.FlattenOnExit == FlattenOnExit))) && (Price.HasValue && (s.Price == Price))) && (Qty.HasValue && (s.Qty == Qty))) && (MinPrice.HasValue && (s.MinPrice == MinPrice))) && (MaxPrice.HasValue && (s.MaxPrice == MaxPrice))) && (MaxEntries.HasValue && (s.MaxEntries == MaxEntries))) && (MaxIterations.HasValue && (s.MaxIterations == MaxIterations))) && (QtyLimit.HasValue && (s.QtyLimit == QtyLimit))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> Strategies_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Strategy> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Strategy>("[Strategies]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> Users_Single(global::System.Nullable<bool> Enabled)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.User>("Users_All"),
                (u) => (Enabled.HasValue && (u.Enabled == Enabled)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> Users_SingleOrDefault(global::System.Nullable<bool> Enabled)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.User>("Users_All"),
                (u) => (Enabled.HasValue && (u.Enabled == Enabled)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> Users_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.User> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.User>("[Users]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> Venues_Single(global::System.Nullable<bool> UseSymbol)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Venue>("Venues_All"),
                (v) => (UseSymbol.HasValue && (v.UseSymbol == UseSymbol)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> Venues_SingleOrDefault(global::System.Nullable<bool> UseSymbol)
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::AAK2DSData.Implementation.Venue>("Venues_All"),
                (v) => (UseSymbol.HasValue && (v.UseSymbol == UseSymbol)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> Venues_All()
        {
            global::System.Linq.IQueryable<global::AAK2DSData.Implementation.Venue> query;
            query = base.CreateQuery<global::AAK2DSData.Implementation.Venue>("[Venues]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::AAK2DSData.Implementation.Account))
            {
                return new global::AAK2DSData.Implementation.Account();
            }
            if (type == typeof(global::AAK2DSData.Implementation.AccountAllocation))
            {
                return new global::AAK2DSData.Implementation.AccountAllocation();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Allocation))
            {
                return new global::AAK2DSData.Implementation.Allocation();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Fill))
            {
                return new global::AAK2DSData.Implementation.Fill();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Firm))
            {
                return new global::AAK2DSData.Implementation.Firm();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Order))
            {
                return new global::AAK2DSData.Implementation.Order();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Product))
            {
                return new global::AAK2DSData.Implementation.Product();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Strategy))
            {
                return new global::AAK2DSData.Implementation.Strategy();
            }
            if (type == typeof(global::AAK2DSData.Implementation.User))
            {
                return new global::AAK2DSData.Implementation.User();
            }
            if (type == typeof(global::AAK2DSData.Implementation.Venue))
            {
                return new global::AAK2DSData.Implementation.Venue();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::AAK2DSData.Implementation.AAK2DSDataObjectContext CreateObjectContext()
        {
            return new global::AAK2DSData.Implementation.AAK2DSDataObjectContext(base.GetEntityConnectionString(
                "AAK2DSData", 
                "res://*/AAK2DSData.csdl|res://*/AAK2DSData.ssdl|res://*/AAK2DSData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Account))
            {
                return new global::AAK2DSData.Implementation.Account();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.AccountAllocation))
            {
                return new global::AAK2DSData.Implementation.AccountAllocation();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Allocation))
            {
                return new global::AAK2DSData.Implementation.Allocation();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Fill))
            {
                return new global::AAK2DSData.Implementation.Fill();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Firm))
            {
                return new global::AAK2DSData.Implementation.Firm();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Order))
            {
                return new global::AAK2DSData.Implementation.Order();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Product))
            {
                return new global::AAK2DSData.Implementation.Product();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Strategy))
            {
                return new global::AAK2DSData.Implementation.Strategy();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.User))
            {
                return new global::AAK2DSData.Implementation.User();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Venue))
            {
                return new global::AAK2DSData.Implementation.Venue();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.AAK2DSData))
            {
                return new global::LightSwitchApplication.AAK2DSDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.AAK2DSData))
            {
                return new global::LightSwitchApplication.Implementation.AAK2DSDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Account) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Account);
            }
            if (typeof(global::LightSwitchApplication.AccountAllocation) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.AccountAllocation);
            }
            if (typeof(global::LightSwitchApplication.Allocation) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Allocation);
            }
            if (typeof(global::LightSwitchApplication.Fill) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Fill);
            }
            if (typeof(global::LightSwitchApplication.Firm) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Firm);
            }
            if (typeof(global::LightSwitchApplication.Order) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Order);
            }
            if (typeof(global::LightSwitchApplication.Product) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Product);
            }
            if (typeof(global::LightSwitchApplication.Strategy) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Strategy);
            }
            if (typeof(global::LightSwitchApplication.User) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.User);
            }
            if (typeof(global::LightSwitchApplication.Venue) == definitionType)
            {
                return typeof(global::AAK2DSData.Implementation.Venue);
            }
            return null;
        }
    }
}

namespace AAK2DSData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Account :
        global::LightSwitchApplication.Account.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class AccountAllocation :
        global::LightSwitchApplication.AccountAllocation.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Allocation :
        global::LightSwitchApplication.Allocation.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Fill :
        global::LightSwitchApplication.Fill.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Firm :
        global::LightSwitchApplication.Firm.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Order :
        global::LightSwitchApplication.Order.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Product :
        global::LightSwitchApplication.Product.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Strategy :
        global::LightSwitchApplication.Strategy.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class User :
        global::LightSwitchApplication.User.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Venue :
        global::LightSwitchApplication.Venue.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

